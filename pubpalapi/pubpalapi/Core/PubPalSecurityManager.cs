using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Security.Cryptography;
using System.Text;
using pubpalapi.Repositories;
using Microsoft.Extensions.Logging;

namespace pubpalapi.Core
{
    public class PubPalSecurityManager
    {
        private const string _alg = "HmacSHA256";
        private const string _salt = "vr3iGn597VqGC55VNgmb";
        private static int _expirationMinutesStart = 0;
        private static int _expirationMinutesEnd = 2880; // 48 hours

        /// <summary>
        /// Generates a token to be used in API calls.
        /// The token is generated by hashing a message with a key, using HMAC SHA256.
        /// The message is: username:ip:timeStamp
        /// The key is: password:ip:salt
        /// The resulting token is then concatenated with username:timeStamp and the result base64 encoded.
        /// 
        /// API calls may then be validated by:
        /// 1. Base64 decode the string, obtaining the token, username, and timeStamp.
        /// 2. Ensure the timestamp is not expired.
        /// 2. Lookup the user's password from the db (cached).
        /// 3. Hash the username:ip:timeStamp with the key of password:salt to compute a token.
        /// 4. Compare the computed token with the one supplied and ensure they match.
        /// </summary>
        public static string GenerateToken(string username, string password, string ip, long ticks)
        {
            string hash = string.Join(":", new string[] { username, ip, ticks.ToString() });
            string hashLeft = "";
            string hashRight = "";

            using (HMAC hmac = HMACSHA256.Create(_alg))
            {
                hmac.Key = Encoding.UTF8.GetBytes(GetHashedPassword(password));
                hmac.ComputeHash(Encoding.UTF8.GetBytes(hash));

                hashLeft = Convert.ToBase64String(hmac.Hash);
                hashRight = string.Join(":", new string[] { username, ticks.ToString() });
            }

            return Convert.ToBase64String(Encoding.UTF8.GetBytes(string.Join(":", hashLeft, hashRight)));
        }

        /// <summary>
        /// Returns a hashed password + salt, to be used in generating a token.
        /// </summary>
        /// <param name="password">string - user's password</param>
        /// <returns>string - hashed password</returns>
        public static string GetHashedPassword(string password)
        {
            string key = string.Join(":", new string[] { password, _salt });

            using (HMAC hmac = HMACSHA256.Create(_alg))
            {
                // Hash the key.
                hmac.Key = Encoding.UTF8.GetBytes(_salt);
                hmac.ComputeHash(Encoding.UTF8.GetBytes(key));

                return Convert.ToBase64String(hmac.Hash);
            }
        }

        /// <summary>
        /// Checks if a token is valid.
        /// </summary>
        /// <param name="token">string - generated either by GenerateToken() or via client with cryptojs etc.</param>
        /// <param name="ip">string - IP address of client, passed in by RESTAuthenticate attribute on controller.</param>
        /// <returns>bool</returns>
        public static bool IsTokenValid(string token, string ip, string dbName, string storeName, PubPalLogger ppLogger)
        {
            bool result = false;

            try
            {
                // Base64 decode the string, obtaining the token:username:timeStamp.
                string key = Encoding.UTF8.GetString(Convert.FromBase64String(token));

                // Split the parts.
                string[] parts = key.Split(new char[] { ':' });
                if (parts.Length == 3)
                {
                    // Get the hash message, username, and timestamp.
                    string hash = parts[0];
                    string email = parts[1];
                    long ticks = long.Parse(parts[2]);
                    DateTime timeStamp = new DateTime(ticks);

                    // Ensure the timestamp is valid.
                    var totalMinutes = Math.Abs((DateTime.UtcNow - timeStamp).TotalMinutes);
                    bool expired = totalMinutes > _expirationMinutesEnd;
                    if (!expired)
                    {
                        // if we're in an hour window and a request is made, add another hour
                        // i.e. 0-60, request made, make start = 0 and end = 120
                        if (totalMinutes > _expirationMinutesStart && totalMinutes < _expirationMinutesEnd)
                        {
                            //_expirationMinutesStart += 60;
                            _expirationMinutesEnd += 60;

                        }
                        UserRepository tempRepo = new UserRepository(dbName, storeName);
                        var _email = email.Replace("\"", "");
                        var userInfo = tempRepo.GetUserByEmail(_email);
                        if (_email == userInfo.email)
                        {
                            string password = userInfo.password;

                            // Hash the message with the key to generate a token.
                            string computedToken = GenerateToken(_email, password, ip, ticks);

                            // Compare the computed token with the one supplied and ensure they match.
                            result = (token == computedToken);

                            if (!result)
                            {
                                var logMessage = new PubPalLog()
                                {
                                    title = "Login Failed",
                                    messages = new List<string>()
                                    {
                                        $"Token From Login: {token}",
                                        $"Token From Class: {computedToken}",
                                        $"Login Hash: {hash}",
                                        $"Login email: {email}",
                                        $"Stored email: {_email}",
                                        $"Login ticks: {ticks}",
                                    }
                                };

                                ppLogger.LogMessage(LogType.info, logMessage);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                var logMessage = new PubPalLog()
                {
                    title = "Login Failed",
                    messages = null
                };

                ppLogger.LogMessage(LogType.info, logMessage, ex);
            }

            return result;
        }

        public static string GetUserIdFromToken(string token, string dbName, string storeName)
        {
            string result = string.Empty;

            try
            {
                // Base64 decode the string, obtaining the token:username:timeStamp.
                string key = Encoding.UTF8.GetString(Convert.FromBase64String(token));

                // Split the parts.
                string[] parts = key.Split(new char[] { ':' });
                if (parts.Length == 3)
                {
                    string email = parts[1];
                    UserRepository tempRepo = new UserRepository(dbName, storeName);
                    var userInfo = tempRepo.GetUserByEmail(email);
                    result = userInfo._id;
                }
            }
            catch
            {
            }

            return result;
        }

    }
}
